from flask import Flask, render_template, request, redirect, url_for, session, flash, send_file
from flask_mysqldb import MySQL
from fpdf import FPDF
import io
import os
import qrcode
import hashlib
from ecdsa import SigningKey, VerifyingKey, NIST256p
import binascii

app = Flask(__name__)
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'nalu'
app.config['MYSQL_DB'] = 'lab'
app.secret_key = 'your_secret_key'

mysql = MySQL(app)

# ECDSA Key Generation and Signing
def generate_keys():
    private_key = SigningKey.generate(curve=NIST256p)
    public_key = private_key.verifying_key
    return private_key, public_key

def sign_data(data, private_key):
    data_hash = hashlib.sha256(data.encode()).digest()
    signature = private_key.sign(data_hash)
    return binascii.hexlify(signature).decode()

def verify_signature(data, signature, public_key):
    data_hash = hashlib.sha256(data.encode()).digest()
    try:
        signature_bytes = binascii.unhexlify(signature)
    except binascii.Error:
        # Handle the error by returning False or logging
        return False
    return public_key.verify(signature_bytes, data_hash)


# PDF Generation with QR Code
def generate_pdf(patient_data, username, signed_data):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    
    pdf.cell(200, 10, txt="Patient Report", ln=True, align='C')
    pdf.ln(10)
    pdf.multi_cell(0, 10, f"Patient Data:\n{patient_data}")
    pdf.ln(5)
    pdf.cell(200, 10, txt=f"Generated by: {username}", ln=True)

    # Generate QR Code for Signature
    os.makedirs("qrcodes", exist_ok=True)
    signature_qr_path = os.path.join("qrcodes", "signature_qr.png")
    signature_qr = qrcode.make(signed_data)
    signature_qr.save(signature_qr_path)

    # Embed Signature QR Code in PDF
    pdf.set_y(pdf.get_y() + 60)
    pdf.cell(200, 10, txt="Signature (QR Code):", ln=True)
    pdf.image(signature_qr_path, x=10, y=pdf.get_y() + 5, w=50, h=50)

    pdf_output = io.BytesIO()
    pdf_output.write(pdf.output(dest='S').encode('latin1'))
    pdf_output.seek(0)

    try:
        os.remove(signature_qr_path)
    except FileNotFoundError:
        print("QR code files not found for cleanup.")

    return pdf_output

@app.route('/')
def home():
    return render_template('home.html')

# Registration Route (Without Role)
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        hashed_password = hashlib.sha256(password.encode()).hexdigest()

        cur = mysql.connection.cursor()
        cur.execute("SELECT * FROM users WHERE username = %s", (username,))
        user = cur.fetchone()

        if user:
            flash("Username already taken, please choose another.")
            cur.close()
            return redirect(url_for('register'))

        cur.execute("INSERT INTO users (username, password) VALUES (%s, %s)", (username, hashed_password))
        mysql.connection.commit()
        cur.close()

        flash("Registration successful! You can now log in.")
        return redirect(url_for('login'))

    return render_template('register.html')

# Login Route (Without Role)
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password = hashlib.sha256(password.encode()).hexdigest()

        cur = mysql.connection.cursor()
        cur.execute("SELECT * FROM users WHERE username = %s", (username,))
        user = cur.fetchone()
        cur.close()

        if user and user[2] == hashed_password:
            session['username'] = username
            flash("Login successful!")
            return redirect(url_for('create_report'))  # Redirect to create_report instead of dashboard
        else:
            flash("Invalid credentials. Please try again.")

    return render_template('login.html')

# Create Report Route (For all users)
@app.route('/create_report', methods=['GET', 'POST'])
def create_report():
    # Check if the user is logged in
    if 'username' not in session:
        flash('Access Denied. Please log in first.', 'danger')
        return redirect(url_for('login'))  # Redirect to login page if not logged in
    
    if request.method == 'POST':
        # Gather form data
        patient_name = request.form['patient_name']
        diagnosis = request.form['diagnosis']
        treatment = request.form['treatment']
        report_date = request.form['report_date']
        
        # Prepare patient data and sign it
        patient_data = f"Name: {patient_name}\nDiagnosis: {diagnosis}\nTreatment: {treatment}\nReport Date: {report_date}"
        private_key, public_key = generate_keys()
        signed_data = sign_data(patient_data, private_key)
        
        # Insert report data into the database
        cur = mysql.connection.cursor()
        cur.execute("INSERT INTO reports (patient_data, signed_data, public_key) VALUES (%s, %s, %s)",
                    (patient_data, signed_data, public_key.to_pem().decode()))
        mysql.connection.commit()
        cur.close()
        
        # Generate and return the PDF file
        pdf_output = generate_pdf(patient_data, session['username'], signed_data)
        return send_file(pdf_output, as_attachment=True, download_name='report.pdf', mimetype='application/pdf')
    
    return render_template('create_report.html')

# Verify Report Route (For all users)
@app.route('/verify_report', methods=['GET', 'POST'])
def verify_report():
    verification_status = None
    
    if request.method == 'POST':
        report_id = request.form['report_id']
        signature = request.form['signature']

        cur = mysql.connection.cursor()
        cur.execute("SELECT patient_data, signed_data, public_key FROM reports WHERE id = %s", (report_id,))
        row = cur.fetchone()
        cur.close()

        if row:
            db_patient_data, db_signed_data, db_public_key = row
            public_key = VerifyingKey.from_pem(db_public_key)

            # Check that both the signature is valid and matches the saved signature
            if verify_signature(db_patient_data, signature, public_key) and signature == db_signed_data:
                verification_status = "Certificate Verified Successfully!"
            else:
                verification_status = "Verification failed: Incorrect signature or report data."
        else:
            verification_status = "Report not found."
    
    return render_template('verify_report.html', verification_status=verification_status)


# Logout Route
@app.route('/logout')
def logout():
    session.pop('username', None)
    flash("You have been logged out.")
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)
